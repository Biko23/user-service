create or replace function UserFunctionalGroupModuleMappingProcedure()
returns
table(
    functional_group_module_mapping_global_id uuid,
    functional_group_name varchar,
    functional_group_description varchar,
    functional_group_global_id uuid,
    module_name varchar,
    module_global_id uuid,
    can_create integer,
    can_email integer,
    can_print integer,
    can_retrieve integer,
    can_search integer,
    can_sms integer,
    can_update integer,
    can_soft_delete integer
) as '

begin

return query
    SELECT
        user_functional_group_module_mapping.functional_group_module_mapping_global_id,
        user_functional_group.name AS functional_group_name,
        user_functional_group.description AS functional_group_description,
        user_functional_group.functional_group_global_id,
        user_module.name AS module_name,
        user_functional_group_module_mapping.module_global_id,
        user_functional_group_module_mapping.can_create,
        user_functional_group_module_mapping.can_email,
        user_functional_group_module_mapping.can_print,
        user_functional_group_module_mapping.can_retrieve,
        user_functional_group_module_mapping.can_search,
        user_functional_group_module_mapping.can_sms,
        user_functional_group_module_mapping.can_update,
        user_functional_group_module_mapping.can_soft_delete
    FROM
        user_functional_group_module_mapping,
        user_functional_group,
        user_module
    WHERE
        user_functional_group_module_mapping.functional_group_global_id = user_functional_group.functional_group_global_id
    AND
        user_functional_group_module_mapping.module_global_id = user_module.module_global_id
    AND
        user_functional_group_module_mapping.soft_delete = 0
    AND
        user_functional_group.is_default = 0;

end;
'
language plpgsql